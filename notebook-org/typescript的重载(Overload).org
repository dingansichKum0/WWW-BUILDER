#+TITLE: typescript的重载(Overload)
#+AUTHOR: dingansichKum0
#+DATE: 2021-10-05
#+DESCRIPTION: 函数、箭头函数、方法（静态方法，实例方法）、react组件重载
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: emacs
#+HUGO_CATEGORIES: code
#+HUGO_DRAFT: nil
#+HUGO_BASE_DIR: ~/WWW-BUILDER
#+HUGO_SECTION: posts

#+BEGIN_VERSE
重载允许函数（方法）接收不同类型或数量的参数时，做出不同的处理。
js本身作为动态脚本语言是支持重载的，typescript的重载更多的是类型系统的补全。
#+END_VERSE

* 函数
#+BEGIN_SRC typescript
  function func(arg: number): number;
  function func(arg: string): string;
  function func(arg: number | string): number | string {
    if (typeof arg === "number") {
      return 0;
    }
    return "0";
  }
#+END_SRC

* lambda
lambda的重载需要通过定义 type 实现。
#+BEGIN_SRC typescript
  type TFunc = {
    (x: number): number;
    (x: number, y: string): string;
  };

  export const func: TFunc = (x: number, y = ""): any => {
    if (y) {
      return `optional: ${y}`;
    }

    return x;
  };
#+END_SRC

* 方法
** 静态方法
#+BEGIN_SRC typescript
  class C {
    static method(arg: string): string;
    static method(): void;
    static method(arg?: string) {
      return arg;
    }
  }
#+END_SRC
** 实例方法
#+BEGIN_SRC typescript
  class C {
    public handle(arg: string): string;
    public handle(arg: boolean): void;
    public handle(arg: string | boolean) {
      if (typeof arg === "string") {
        return arg;
      }
      return;
    }
  }
#+END_SRC

* React组件
** 普通函数
#+BEGIN_SRC typescript
  interface IInputSelectProps<T> {
    options: T[];
    getOptionsLabel?: (arg: T) => string;
    getOptionsValue?: (arg: T) => string;
  }

  export function InputSelect<T>(props: IInputSelectProps<T>): ReactElement;
  export function InputSelect({
    options,
    getOptionsLabel = (arg) => arg,
    getOptionsValue = (arg) => arg,
  }: IInputSelectProps<string>): ReactElement {
    return <div />;
  }

  <InputSelect
    options={[{ label: "1", value: "2" }]}
    getOptionsLabel={(arg) => arg.label}
    getOptionsValue={(arg) => arg.value}
  />
#+END_SRC

** lambda
#+BEGIN_SRC typescript
  interface IInputSelectProps<T> {
    options: T[];
    getOptionsLabel?: (arg: T) => string;
    getOptionsValue?: (arg: T) => string;
  }

  type TInputSelect = {
    (props: IInputSelectProps<string>): ReactElement;
    <T>(props: IInputSelectProps<T>): ReactElement;
  };

  export const InputSelect: TInputSelect = ({
    options,
    getOptionsLabel = (arg) => arg,
    getOptionsValue = (arg) => arg,
  }): ReactElement => {
    return <div />;
  };

  <InputSelect
    options={[{ label: "1", value: "2" }]}
    getOptionsLabel={(arg) => arg.label}
    getOptionsValue={(arg) => arg.value}
  />;

#+END_SRC
