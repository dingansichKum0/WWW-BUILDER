#+TITLE: 常用的typescript类型推导公式
#+AUTHOR: dingansichKum0 
#+DATE: 2021-05-21
#+DESCRIPTION: 类型推导公式汇总
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: typescript
#+HUGO_CATEGORIES: code
#+HUGO_DRAFT: nil
#+HUGO_BASE_DIR: ~/WWW-BUILDER
#+HUGO_SECTION: posts


* 函数参数类型
#+BEGIN_SRC typescript
  type TFuncParameterType<T> = T extends (arg: infer P) => void ? P : string;

  // e.g
  function func(arg: string) {}
  type TParamsType = TFuncParameterType<typeof func>; // string
#+END_SRC

* 函数返回值类型
#+BEGIN_SRC typescript
  type TFuncReturnType<T> = T extends (arg: any) => infer P ? P : string;

  // e.g
  function func(arg: string): number {}
  type TReturnType = TFuncReturnType<typeof func>; // number
#+END_SRC

* 数组成员作为键约束
#+BEGIN_SRC typescript
  const keys = ["a", "b", "c"] as const;
  type TKeysMap = Record<typeof keys[number], string> // KeysMap: { a: string; b: string; c: string; }
#+END_SRC

* 数组元素类型
#+BEGIN_SRC  typescript
  type ArrayElement<T extends readonly unknown[]> = T extends readonly (infer P)[]
    ? P
    : never;

  // e.g
  const arr = [0, 1];
  type TArr = ArrayElement<typeof arr> // number
#+END_SRC

* 属性覆写
#+BEGIN_SRC typescript
  type Overwrite<T, R> = Omit<T, keyof R> & R;

  // e.g
  interface IA {
    a: number;
    b: string;
  }
  type TA = Overwrite<IA, {a: string}> // {a: string; b:string}
#+END_SRC

* 元祖作为键约束
#+BEGIN_SRC typescript
  type TuplesAsKey<T extends readonly any[], P> = {
    [K in T[number]]: P;
  };

  // e.g
  const keys = ["x", "y"] as const;
  type TA = TuplesAsKey<typeof keys, string>; // {x: string, y: string}
#+END_SRC

* 函数类型省略this
#+BEGIN_SRC typescript
  type OmitThisParameter<T> = unknown extends ThisParameterType<T>
    ? T
    : T extends (...args: infer A) => infer R
    ? (...args: A) => R
    : number;


  // e.g
  const func = (this: void, arg: string) => {};
  type TFunc = OmitThisParameter<typeof func>; // type TFunc = (arg: string) => void 
#+END_SRC

